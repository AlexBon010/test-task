# version: '3.8'

# networks:
#   service-1-network:
#     driver: bridge
#   service-2-network:
#     driver: bridge

# services:
#   service-1:
#     build:
#       context: ./test-task-service-1
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     ports:
#       - '${SERVICE_1_PORT}:${SERVICE_1_PORT}'
#     networks:
#       - service-1-network
#   service-2:
#     build:
#       context: ./test-task-service-2
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     ports:
#       - '${SERVICE_2_PORT}:${SERVICE_2_PORT}'
#     networks:
#       - service-2-network

#   mongodb:
#     image: mongo:latest
#     container_name: mongodb
#     restart: unless-stopped
#     volumes:
#       - mongodb_data:/data/db
#     networks:
#       - service-1-network

#   redis-timeseries:
#     image: redis/redis-stack:latest
#     container_name: redis-timeseries
#     restart: unless-stopped
#     volumes:
#       - redis_data:/data
#     networks:
#       - service-1-network
#       - service-2-network

#   kafka:
#     image: apache/kafka:latest
#     container_name: kafka
#     restart: unless-stopped
#     volumes:
#       - kafka_data:/var/lib/kafka/data
#     environment:
#       KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
#       KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
#       KAFKA_NODE_ID: 1
#       KAFKA_PROCESS_ROLES: broker,controller
#       KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
#       KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_NUM_PARTITIONS: 3
#       KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
#       KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE'
#       KAFKA_REST_ACCESS_CONTROL_ALLOW_HEADERS: 'origin,content-type,accept,authorization'
#     networks:
#       - service-1-network
#       - service-2-network

#   elasticsearch:
#     image: elasticsearch:9.1.0
#     container_name: elasticsearch
#     restart: unless-stopped
#     volumes:
#       - elasticsearch_data:/usr/share/elasticsearch/data
#     environment:
#       discovery.type: single-node
#       xpack.security.enabled: false
#     networks:
#       - service-2-network

# volumes:
#   mongodb_data:
#   redis_data:
#   kafka_data:
#   elasticsearch_data:


version: '3.8'

networks:
  service-1-network:
    driver: bridge
  service-2-network:
    driver: bridge

services:
  # service-1:
  #   build:
  #     context: ./test-task-service-1
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   ports:
  #     - '${SERVICE_1_PORT}:${SERVICE_1_PORT}'
  #   networks:
  #     - service-1-network
  # service-2:
  #   build:
  #     context: ./test-task-service-2
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   ports:
  #     - '${SERVICE_2_PORT}:${SERVICE_2_PORT}'
  #   networks:
  #     - service-2-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    volumes:
      - mongodb_data:/data/db
    ports:
      - '27017:27017'
    networks:
      - service-1-network

  redis-timeseries:
    image: redis/redis-stack:latest
    container_name: redis-timeseries
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - service-1-network
      - service-2-network

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    restart: unless-stopped
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_HEADERS: 'origin,content-type,accept,authorization'
    networks:
      - service-1-network
      - service-2-network

  elasticsearch:
    image: elasticsearch:9.1.0
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    networks:
      - service-2-network

volumes:
  mongodb_data:
  redis_data:
  kafka_data:
  elasticsearch_data:
